name: CI

on: push

env:
  DOWNLOAD_TOOL: curl -fLOSs --retry 2 --retry-delay 60

jobs:
  windows:
    strategy:
      matrix:
        include:
          # Windows x86_64
          - triplet: x64-windows
            os: windows-latest
            os-name: Windows
            pkgs: qt5-base qt5-tools ffmpeg[ass,modplug,nvcodec,x264,x265] portaudio openimageio opencolorio opentimelineio

          # Windows i686
          - triplet: x86-windows
            os: windows-latest
            os-name: Windows
            pkgs: qt5-base qt5-tools ffmpeg[ass,modplug,nvcodec,x264,x265] portaudio openimageio opencolorio opentimelineio

          # macOS 10.13+ (Intel)
          - triplet: x64-osx
            os: macos-10.15
            os-name: macOS
            pkgs: qt5-base qt5-tools ffmpeg[ass,modplug,x264,x265] portaudio openimageio opencolorio opentimelineio

          # macOS 11.0+ (ARM64)
          #- triplet: arm64-osx
          #  os: macos-11.0
          #  os-name: macOS
    name: ${{ matrix.os-name }} (${{ matrix.triplet }})
    env:
      PACKAGES: ${{ matrix.pkgs }}
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Enable Developer Command Prompt (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgGitCommitId: 897ff9372f15c032f1e6cd1b97a59b57d66ee5b2
          setupOnly: true

      - name: Set minimum deployment target
        if: matrix.triplet == 'x64-osx'
        run: |
          echo "set(VCPKG_OSX_DEPLOYMENT_TARGET 10.13)" >> $VCPKG_ROOT/triplets/x64-osx.cmake
          echo "set(VCPKG_C_FLAGS -mmacosx-version-min=10.13)" >> $VCPKG_ROOT/triplets/x64-osx.cmake
          echo "set(VCPKG_CXX_FLAGS -mmacosx-version-min=10.13)" >> $VCPKG_ROOT/triplets/x64-osx.cmake

      - name: Build from vcpkg
        shell: bash
        run: |
          $VCPKG_ROOT/vcpkg install --clean-after-build --overlay-ports $GITHUB_WORKSPACE/ports $PACKAGES

      #- name: Build OpenColorIO
      #  shell: bash
      #  working-directory: ${{ runner.workspace }}
      #  run: |
      #    git clone --branch $OCIO_VERSION https://github.com/olive-editor/OpenColorIO
      #    cd OpenColorIO
      #    git cherry-pick -n 0d480fb29242923edcabd87f7ab7a0af8550fb63
      #    mkdir build
      #    cd build
      #    cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOCIO_BUILD_PYTHON=OFF -DOCIO_BUILD_APPS=OFF -DOCIO_BUILD_TESTS=OFF -DOCIO_BUILD_GPU_TESTS=OFF -DOCIO_BUILD_DOCS=OFF
      #    ninja
      #    ninja install
      #    cd ..
      #    rm -rf OpenColorIO

      #- name: Build OpenTimelineIO
      #  shell: bash
      #  working-directory: ${{ runner.workspace }}
      #  run: |
      #    git clone --depth 1 https://github.com/PixarAnimationStudios/OpenTimelineIO.git
      #    cd OpenTimelineIO
      #    mkdir build
      #    cd build
      #    cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOTIO_PYTHON_INSTALL=OFF
      #    ninja
      #    ninja install

      - name: Deploy
        shell: bash
        working-directory: ${{ runner.workspace }}
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRAVIS_REPO_SLUG: olive-editor/vcpkg-registry
          TRAVIS_COMMIT: ${{ github.sha }}
        run: |
          cd $VCPKG_ROOT
          vcpkg export $PACKAGES --zip
          OUTPUT_FILE=olive-dep-$VCPKG_DEFAULT_TRIPLET.zip
          mv vcpkg-export-*.zip $OUTPUT_FILE
          $DOWNLOAD_TOOL https://github.com/probonopd/uploadtool/raw/master/upload.sh
          ./upload.sh "$OUTPUT_FILE"
